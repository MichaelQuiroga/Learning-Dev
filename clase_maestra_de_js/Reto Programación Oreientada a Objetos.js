// //1. Refuerza tus conocimientos de POO creando un sistema de Veh√≠culos.
//       1. Crea una clase Veh√≠culo que incluya un constructor que establezca el n√∫mero de ruedas y un m√©todo para mostrar detalles generales del veh√≠culo. 
//       2. Crea dos subclases de Veh√≠culos cualesquiera que hereden de Veh√≠culo e incluyan un constructor con atributos espec√≠ficos, como la capacidad de pasajeros, y un m√©todo para mostrar detalles personalizados.
//       3. Crea una instancia de cada Veh√≠culo y muestra sus detalles en la consola. üöóüö≤
// 2. Intenta escribir el c√≥digo de JavaScript que ves en la terminal. No tiene que ser perfecto! üßë‚Äçüíª 
// 3. Compara tu soluci√≥n con la soluci√≥n incluida en los archivos descargables al inicio del curso y descubre que partes pudiste hacer de mejor manera. No te preocupes si encuentras m√©todos que no conoc√≠as, ya las conocer√°s! üôå Buenas habilidades! üî•

// Clase base Veh√≠culo
class Vehiculo {
    constructor(ruedas) {
        this.ruedas = ruedas;
    }

    detallesGenerales() {
        return `Este veh√≠culo tiene ${this.ruedas} ruedas.`;
    }
}

class coche1 extends Vehiculo {
    constructor(ruedas, capacidadPasajeros) {
        super(ruedas);
        this.capacidadPasajeros = capacidadPasajeros;
    }
    detallesPersonalizados() {
        return `Este coche tiene ${this.ruedas} ruedas y una capacidad de ${this.capacidadPasajeros} pasajeros.`;
    }
}

class bicicleta1 extends Vehiculo {
    constructor(ruedas, tipo) {
        super(ruedas);
        this.tipo = tipo;
    }
    detallesPersonalizados() {
        return `Esta bicicleta tiene ${this.ruedas} ruedas y es de tipo ${this.tipo}.`;
    }
}

let micoche = new coche1(4, 5);
console.log(micoche.detallesGenerales());
console.log(micoche.detallesPersonalizados());

let miBicicleta = new bicicleta1(2, 'monta√±a');
console.log(miBicicleta.detallesGenerales());
console.log(miBicicleta.detallesPersonalizados());